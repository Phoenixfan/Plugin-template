plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}

group 'de.phibsy'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

archivesBaseName = project.property("pluginName")

repositories {
    mavenCentral()

    //Added spigot repository
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    //Added md5's repository to add the missing Bungeecord-Chat api
    maven {
        name = 'Bungeecord-Chat'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    //Add your repositories here
}

ext {
    //Define one of the supported mc versions
    mcVersion = '1.14.4'
}

dependencies {
    //Adds the spigot api to your plugin
    compileOnly "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"

    //lombok
    compileOnly group: "org.projectlombok", name: "lombok", version: "1.18.20"
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    //Add your dependencies here
}

shadowJar {
    classifier = ''
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

task cleanPlugin() {
    group 'deploy'
    description 'Cleans the plugin in the working directory up'
    delete "${projectDir}/working/plugins/" + project.property("pluginName") + '-' + project.version.toString() + '.jar'
}

task deploy(type: Copy, dependsOn: ['cleanPlugin', 'jar']) {
    group 'deploy'
    description 'Exports you plugin to the plugin directory in your test server'

    def pluginFolder = project.property('pluginFolder').toString()

    from shadowJar
    into pluginFolder.isEmpty() ? "${projectDir}/working/plugins" : pluginFolder
}

task setupServer {
    group 'server'
    description 'Downloads the server jar'

    def server = new File("${projectDir}/working/server.jar")

    if (server.exists()) {
        server.delete()
    }

    def url = ''
    switch (mcVersion) {
        case '1.8.8':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.8.8-R0.1-SNAPSHOT-latest.jar'
            break

        case '1.12.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.12.2.jar'
            break

        case '1.13.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.13.2.jar'
            break

        case '1.14.4':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.14.4.jar'
            break

        case '1.16.5':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.16.5.jar'
            break

        case '1.17.1':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.17.1.jar'
            break
    }

    if (url.isEmpty()) {
        throw new GradleException('NOT A SUPPORTED VERSION!')
    }

    new URL(url).withInputStream { i -> server.withOutputStream { it << i } }
}
